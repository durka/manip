% in 2D and 3D
%   params{1} SE(n) is the center of rotation (WRT from-object center)
%   params{2} SE(n) is the offset from the center to the moving part at theta=0
%   state     R     is the angle around the circle
function [x, Dr, Dt] = forward_revolute(p, state)
    if iscell(p)
        params = p;
    else
        [params, ct, cr, ~, rr] = unpack_revolute(p);
    end
    center = params{1};
    radius = params{2};
    theta = state;
    
    n = size(center,1)-1;
    x = radius * R(theta*eye(1,n*(n-1)/2)) * center;
    
    if nargout > 1
        if iscell(p)
            [ct, cr] = extract_SE(center);
            [~, rr] = extract_SE(radius);
        end
        if length(ct) == 2
            thr = rr + theta;
            th = cr + thr;
            cthr = cos(thr);
            sthr = sin(thr);
            cth = cos(th);
            sth = sin(th);
            Dr = [ 0 0 -sth     0 0 -sth    -sth
                   0 0  cth     0 0  cth     cth
                   0 0 -cth     0 0 -cth    -cth
                   0 0 -sth     0 0 -sth    -sth ];
            Dt = [ cthr -sthr 0     1 0 -sthr*ct(1)-cthr*ct(2)      -sthr*ct(1)-cthr*ct(2)
                   sthr  cthr 0     0 1  cthr*ct(1)-sthr*ct(2)       cthr*ct(1)-sthr*ct(2) ];
        else
            ccr = cos(cr);
            scr = sin(cr);
            crr = cos(rr);
            srr = sin(rr);
            ctheta = cos(theta);
            stheta = sin(theta);
            Dr =   [ 0, 0, 0, (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) + (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)))  , ccr(1)*ccr(3)*scr(2)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) + ccr(3)*scr(1)*scr(2)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - ccr(2)*ccr(3)*crr(1)*srr(2)  , (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) - (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) + crr(1)*scr(2)*scr(3)*srr(2), 0, 0, 0, (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) + ccr(3)*scr(2)*srr(1)*srr(2), (crr(1)*crr(3)*srr(2)*stheta + crr(1)*ctheta*srr(2)*srr(3))*(ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1)) + (crr(1)*crr(3)*ctheta*srr(2) - crr(1)*srr(2)*srr(3)*stheta)*(scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3)) - ccr(3)*crr(1)*crr(2)*scr(2), (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) + (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)))  , (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) + (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)))
                     0, 0, 0, - (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))), - ccr(1)*ccr(3)*scr(2)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - ccr(3)*scr(1)*scr(2)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - ccr(2)*ccr(3)*srr(1)*srr(2), (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) + scr(2)*scr(3)*srr(1)*srr(2), 0, 0, 0, (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) - (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - ccr(3)*crr(1)*scr(2)*srr(2), (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(crr(3)*srr(1)*srr(2)*stheta + ctheta*srr(1)*srr(2)*srr(3)) + (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(crr(3)*ctheta*srr(1)*srr(2) - srr(1)*srr(2)*srr(3)*stheta) - ccr(3)*crr(2)*scr(2)*srr(1), - (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))), - (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)))
                     0, 0, 0, (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2)) + (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3))                                                                                                                                                      , ccr(2)*ccr(3)*crr(2) + ccr(1)*ccr(3)*scr(2)*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2)) + ccr(3)*scr(1)*scr(2)*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3))                                                                                                                                                                 , (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2)) - (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3)) - crr(2)*scr(2)*scrscr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(crr(2)*srr(3)*stheta - crr(2)*crr(3)*ctheta) - (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(crr(2)*crr(3)*stheta + crr(2)*ctheta*srr(3)) - ccr(3)*scr(2)*srr(2)                                                       , (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2)) + (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3))                                                                                                                                                      , (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2)) + (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3))
                     0, 0, 0, (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) + (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)))  , ccr(2)*crr(1)*scr(3)*srr(2) - scr(1)*scr(2)*scr(3)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - ccr(1)*scr(2)*scr(3)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)))  , (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) + ccr(3)*crr(1)*scr(2)*srr(2), 0, 0, 0, (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - scr(2)*scr(3)*srr(1)*srr(2), (crr(1)*crr(3)*srr(2)*stheta + crr(1)*ctheta*srr(2)*srr(3))*(ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3)) + (crr(1)*crr(3)*ctheta*srr(2) - crr(1)*srr(2)*srr(3)*stheta)*(ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3)) + crr(1)*crr(2)*scr(2)*scr(3), (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) + (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)))  , (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) + (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)))
                     0, 0, 0, - (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))), ccr(1)*scr(2)*scr(3)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) + scr(1)*scr(2)*scr(3)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) + ccr(2)*scr(3)*srr(1)*srr(2)  , (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) + ccr(3)*scr(2)*srr(1)*srr(2), 0, 0, 0, (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) - (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) + crr(1)*scr(2)*scr(3)*srr(2), (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(crr(3)*ctheta*srr(1)*srr(2) - srr(1)*srr(2)*srr(3)*stheta) + (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(crr(3)*srr(1)*srr(2)*stheta + ctheta*srr(1)*srr(2)*srr(3)) + crr(2)*scr(2)*scr(3)*srr(1), - (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))), - (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)))
                     0, 0, 0, (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3)) + (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2))                                                                                                                                                      , - ccr(2)*crr(2)*scr(3) - ccr(1)*scr(2)*scr(3)*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2)) - scr(1)*scr(2)*scr(3)*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3))                                                                                                                                                               , (ccr(1)*scr(3) + ccr(2)*ccr(3)*scr(1))*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3)) - (scr(1)*scr(3) - ccr(1)*ccr(2)*ccr(3))*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2)) - ccr(3)*crr(2)*scrccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(crr(2)*srr(3)*stheta - crr(2)*crr(3)*ctheta) - (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(crr(2)*crr(3)*stheta + crr(2)*ctheta*srr(3)) + scr(2)*scr(3)*srr(2)                                                       , (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3)) + (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2))                                                                                                                                                      , (ccr(3)*scr(1) + ccr(1)*ccr(2)*scr(3))*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srr(3)) + (ccr(1)*ccr(3) - ccr(2)*scr(1)*scr(3))*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2))
                     0, 0, 0, ccr(1)*scr(2)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - scr(1)*scr(2)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)))                                                                            , ccr(1)*ccr(2)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) + ccr(2)*scr(1)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) + crr(1)*scr(2)*srrccr(1)*scr(2)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) + scr(1)*scr(2)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) + ccr(2)*srr(1)*srr(2)                                                                                     , ccr(1)*scr(2)*(crr(1)*crr(3)*ctheta*srr(2) - crr(1)*srr(2)*srr(3)*stheta) - scr(1)*scr(2)*(crr(1)*crr(3)*srr(2)*stheta + crr(1)*ctheta*srr(2)*srr(3)) - ccr(2)*crr(1)*crr(2)                                                                                     , ccr(1)*scr(2)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - scr(1)*scr(2)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)))                                                                            , ccr(1)*scr(2)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - scr(1)*scr(2)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)))
                     0, 0, 0, scr(1)*scr(2)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - ccr(1)*scr(2)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)))                                                                            , scr(2)*srr(1)*srr(2) - ccr(1)*ccr(2)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - ccr(2)*scr(1)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srrccr(1)*scr(2)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) + scr(1)*scr(2)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - ccr(2)*crr(1)*srr(2)                                                                                     , ccr(1)*scr(2)*(crr(3)*ctheta*srr(1)*srr(2) - srr(1)*srr(2)*srr(3)*stheta) - scr(1)*scr(2)*(crr(3)*srr(1)*srr(2)*stheta + ctheta*srr(1)*srr(2)*srr(3)) - ccr(2)*crr(2)*srr(1)                                                                                     , scr(1)*scr(2)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - ccr(1)*scr(2)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)))                                                                            , scr(1)*scr(2)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))) - ccr(1)*scr(2)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)))
                     0, 0, 0, -(sin(cr(1) + rr(3) + theta)*(cos(cr(2) + rr(2)) - cos(cr(2) - rr(2))))/2                                                                                                                                                                                                                                                                                                                                                , ccr(1)*ccr(2)*(srr(2)*srr(3)*stheta - crr(3)*ctheta*srr(2)) - crr(2)*scr(2) + ccr(2)*scr(1)*(crr(3)*srr(2)*stheta + ctheta*srr(2)*srrccr(1)*scr(2)*(crr(2)*srr(3)*stheta - crr(2)*crr(3)*ctheta) - ccr(2)*srr(2) + scr(1)*scr(2)*(crr(2)*crr(3)*stheta + crr(2)*ctheta*srr(3))                                                                                                                                            , -(sin(cr(1) + rr(3) + theta)*(cos(cr(2) + rr(2)) - cos(cr(2) - rr(2))))/2                                                                                                                                                                                                                                                                                                                                                , -(sin(cr(1) + rr(3) + theta)*(cos(cr(2) + rr(2)) - cos(cr(2) - rr(2))))/2                                                                                                                                                                                                                                                                                                                                                     ];
            Dt =   [ - ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) - stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)), stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) - ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)), -crr(1)*srr(2), 0, 0, 0, 1, 0, 0, ct(3)*srr(1)*srr(2) - ct(2)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - ct(1)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)))  , crr(1)*(ct(2)*crr(3)*srr(2)*stheta - ct(1)*crr(3)*ctheta*srr(2) - ct(3)*crr(2) + ct(2)*ctheta*srr(2)*srr(3) + ct(1)*srr(2)*srr(3)*stheta), ct(2)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) - ct(1)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))), ct(2)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) - ct(1)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)))
                       ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))  , ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)), -srr(1)*srr(2), 0, 0, 0, 0, 1, 0, - ct(1)*(ctheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3)) + stheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3))) - ct(2)*(ctheta*(crr(3)*srr(1) + crr(1)*crr(2)*srr(3)) - stheta*(srr(1)*srr(3) - crr(1)*crr(2)*crr(3))) - ct(3)*crr(1)*srr(2), srr(1)*(ct(2)*crr(3)*srr(2)*stheta - ct(1)*crr(3)*ctheta*srr(2) - ct(3)*crr(2) + ct(2)*ctheta*srr(2)*srr(3) + ct(1)*srr(2)*srr(3)*stheta), ct(1)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - ct(2)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3))), ct(1)*(ctheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)) - stheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1))) - ct(2)*(ctheta*(crr(1)*srr(3) + crr(2)*crr(3)*srr(1)) + stheta*(crr(1)*crr(3) - crr(2)*srr(1)*srr(3)))
                       cos(rr(3) + theta)*srr(2)                                                                                                                  , -sin(rr(3) + theta)*srr(2)                                                                                                               , crr(2)            , 0, 0, 0, 0, 0, 1, 0                                                                                                                                                                                                                                                                                                                                            , - ct(1)*(crr(2)*srr(3)*stheta - crr(2)*crr(3)*ctheta) - ct(2)*(crr(2)*crr(3)*stheta + crr(2)*ctheta*srr(3)) - ct(3)*srr(2)                   , -srr(2)*(ct(2)*cos(rr(3) + theta) + ct(1)*sin(rr(3) + theta))                                                                                                                                                                                                                                            , -srr(2)*(ct(2)*cos(rr(3) + theta) + ct(1)*sin(rr(3) + theta))                                                                                                                                                                                                                                              ];
        end
    end
end
