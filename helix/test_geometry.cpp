#include <iostream>

#include "geometry.h"

using namespace acquire;

int main()
{
    cv::Mat pts(5, 3, CV_64FC1);
    pts.at<double>(0, 0) =  1; pts.at<double>(0, 1) =  0; pts.at<double>(0, 2) =  0;
    pts.at<double>(1, 0) =  0; pts.at<double>(1, 1) =  1; pts.at<double>(1, 2) =  0;
    pts.at<double>(2, 0) =  0; pts.at<double>(2, 1) =  0; pts.at<double>(2, 2) =  1;
    pts.at<double>(3, 0) =  1; pts.at<double>(3, 1) =  2; pts.at<double>(3, 2) =  3;
    pts.at<double>(4, 0) = -4; pts.at<double>(4, 1) = -5; pts.at<double>(4, 2) = -6;

    cout << "points\n " << pts << endl;

    Plane xyplane;
    cout << "xy " << xyplane.origin << xyplane.u << xyplane.v << endl;
    cout << "xy projected\n " << xyplane.project(pts) << endl;
    cout << "...position\n " << xyplane.position(xyplane.project(pts)) << endl;
    cout << "...position\n " << xyplane.position(xyplane.position(xyplane.project(pts))) << endl;

    Plane plane(pts.row(0), pts.row(3));
    cout << "123 " << plane.origin << plane.u << plane.v << endl;
    cout << "123 projected\n " << plane.project(pts) << endl;
    cout << "...position\n " << plane.position(plane.project(pts)) << endl;
    cout << "...position\n " << plane.position(plane.position(plane.project(pts))) << endl;

    Projection proj;
    proj.init(pts, plane.u.cross(plane.v));
    cout << "proj" << endl
         << proj.Y3 << endl
         << proj.Y2 << endl
         << proj.caxis << endl
         << proj.origin3 << endl
         << proj.origin2 << endl
         << proj.radius << " " << proj.err << " " << proj.thickness << endl;

    proj.do_pitch();
    cout << proj.theta << endl
         << proj.pitch << " " << proj.offset << endl;

    return 0;
}

/* THE OUTPUT SHOULD BE:

points
 [1, 0, 0;
  0, 1, 0;
  0, 0, 1;
  1, 2, 3;
  -4, -5, -6]
xy [0, 0, 0][1, 0, 0][0, 1, 0]
xy projected
 [1, 0, 0;
  0, 1, 0;
  0, 0, 0;
  1, 2, 0;
  -4, -5, 0]
...position
 [1, 0;
  0, 1;
  0, 0;
  1, 2;
  -4, -5]
...position
 [1, 0, 0;
  0, 1, 0;
  0, 0, 0;
  1, 2, 0;
  -4, -5, 0]
123 [1, 0, 0][0, 0.8320502943378437, -0.5547001962252291][-0.9636241116594315, 0.1482498633322202, 0.2223747949983303]
123 projected
 [1, 0, 0;
  -0.07142857142857144, 0.8571428571428571, -0.2142857142857144;
  -0.1428571428571428, -0.2857142857142858, 0.5714285714285714;
  0.07142857142857162, 0.1428571428571428, 0.214285714285714;
  -1.642857142857143, -0.2857142857142856, 1.071428571428571]
...position
 [0, 0;
  0.8320502943378437, 1.111873974991652;
  -0.5547001962252291, 1.185998906657762;
  1.110223024625157e-16, 0.9636241116594312;
  -0.8320502943378434, 2.742622471646075]
...position
 [1, 0, 0;
  -0.0714285714285714, 0.8571428571428572, -0.2142857142857144;
  -0.1428571428571428, -0.2857142857142858, 0.5714285714285714;
  0.07142857142857173, 0.1428571428571429, 0.2142857142857141;
  -1.642857142857143, -0.2857142857142855, 1.071428571428571]
[0.1109400392450459, -1.200823892990984, 1;
  0.9429903335828895, -0.08894991799933229, 1;
  -0.4437601569801835, -0.01482498633322216, 1;
  0.1109400392450458, -0.2371997813315528, 1;
  -0.7211102550927977, 1.541798578655091, 1]
proj
[0.7571428571428572, -0.4857142857142857, -0.7285714285714285;
  -0.3142857142857142, 0.3714285714285714, -0.9428571428571429;
  -0.3857142857142856, -0.7714285714285715, -0.157142857142857;
  -0.1714285714285708, -0.3428571428571425, -0.5142857142857138;
  -1.885714285714287, -0.7714285714285714, 0.3428571428571425]
[0.1109400392450459, -1.200823892990984;
  0.9429903335828895, -0.08894991799933229;
  -0.4437601569801835, -0.01482498633322216;
  0.1109400392450458, -0.2371997813315528;
  -0.7211102550927977, 1.541798578655091]
[0.2672612419124243, 0.5345224838248488, 0.8017837257372732]
[-0.6890596745027129, -0.4454792043399636, -0.2733273056057867]
[-0.1081063537941662; 0.2999714006791828]
1.01252 0.932735 0.473451
[-1.425866122510999; -0.3543929269732653; -2.388249630018484; -1.183603127376577; -4.253849858163312]
2.61745 4.3872

*/

