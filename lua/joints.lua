--- kinematic joint definitions.
-- the class interface is:
--   new
--   unpack
--   forward
--   inverse
--   guess
--   reverse
--   move
-- TODO how to enforce interfaces in Lua

local utils = require 'utils'

utils.module 'joints'
utils.import('geometry', 'SE, Plane')

--- registry for joint types.
types = {}

local function register_joint(name)
    local G = getfenv(2)
    G[name] = {name = name}
    table.insert(G.types, G[name])
end

--- rigid joint class.
-- ONLY 3D (TODO 2D)
-- @field p (tensor 6) the joint parameters
register_joint 'Rigid'

--- constructor.
-- @param p (tensor 6 or numeric array(6)) the joint parameters
function Rigid:new(p)
    return setmetatable({p = torch.Tensor(p)}, {__index = Rigid})
end

--- unpack joint parameters.
-- @return table of { offset (SE) }
function Rigid:unpack()
    return {offset = SE:new(3)
                       :T(self.p[{{1,3}}])
                       :R_euler('ZYZ', self.p[{{4,6}}])}
end

--- forward kinematics.
-- @param state
-- @param jacobian non-nil if the Jacobians should be calculated
-- @return x
-- @return Dr (if jacobian is non-nil)
-- @return Dt (if jacobian is non-nil)
function Rigid:forward(state, jacobian)
    p = self:unpack()

    -- rigid forward kinematics: no-op
    x = p.offset.m

    if jacobian then
        t, r = p.offset:extract()
        if #t == 2 then
            Dr = torch.Tensor{{0, 0, -math.sin(r[1]), 0},
                              {0, 0, -math.cos(r[1]), 0},
                              {0, 0,  math.cos(r[1]), 0},
                              {0, 0, -math.sin(r[1]), 0}}
            Dt = torch.Tensor{{1, 0, 0, 0},
                              {0, 1, 0, 0}}
        else
            Dr = torch.Tensor{{0, 0, 0,       -math.cos(r[1])*math.sin(r[3]) - math.cos(r[2])*math.cos(r[3])*math.sin(r[1]),      -math.cos(r[1])*math.cos(r[3])*math.sin(r[2]),       -math.cos(r[3])*math.sin(r[1]) - math.cos(r[1])*math.cos(r[2])*math.sin(r[3]),      0},
                              {0, 0, 0,       -math.sin(r[1])*math.sin(r[3]) + math.cos(r[1])*math.cos(r[2])*math.cos(r[3]),      -math.cos(r[3])*math.sin(r[1])*math.sin(r[2]),       -math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) + math.cos(r[1])*math.cos(r[3]),      0},
                              {0, 0, 0,        0,                                                                                  math.cos(r[2])*math.cos(r[3]),                      -math.sin(r[2])*math.sin(r[3]),                                                     0},
                              {0, 0, 0,       -math.cos(r[1])*math.cos(r[3]) + math.cos(r[2])*math.sin(r[1])*math.sin(r[3]),       math.cos(r[1])*math.sin(r[2])*math.sin(r[3]),        math.sin(r[1])*math.sin(r[3]) - math.cos(r[1])*math.cos(r[2])*math.cos(r[3]),      0},
                              {0, 0, 0,       -math.cos(r[3])*math.sin(r[1]) - math.cos(r[1])*math.cos(r[2])*math.sin(r[3]),       math.sin(r[1])*math.sin(r[2])*math.sin(r[3]),       -math.cos(r[1])*math.sin(r[3]) - math.cos(r[2])*math.cos(r[3])*math.sin(r[1]),      0},
                              {0, 0, 0,        0,                                                                                 -math.cos(r[2])*math.sin(r[3]),                      -math.cos(r[3])*math.sin(r[2]),                                                     0},
                              {0, 0, 0,        math.sin(r[1])*math.sin(r[2]),                                                     -math.cos(r[1])*math.cos(r[2]),                       0,                                                                                 0},
                              {0, 0, 0,       -math.cos(r[1])*math.sin(r[2]),                                                     -math.cos(r[2])*math.sin(r[1]),                       0,                                                                                 0},
                              {0, 0, 0,        0,                                                                                 -math.sin(r[2]),                                      0,                                                                                 0}}
            Dt = torch.Tensor{{1, 0, 0,    0, 0, 0,   0},
                              {0, 1, 0,    0, 0, 0,   0},
                              {0, 0, 1,    0, 0, 0,   0}}
        end
        return x, Dr, Dt
    else
        return x
    end
end

--- inverse kinematics.
-- @param x
-- @param jacobian (non-nil if Jacobian should be calculated)
-- @return state
-- @return D (if jacobian is non-nil)
function Rigid:inverse(x, jacobian)
    local state = 0; -- rigid joints have no state

    if jacobian then
        n = x:size(1)-1
        d = n*(n+1)/2
        D = torch.cat(torch.eye(d), torch.zeros(1,d), 1)
        return state, D
    else
        return state
    end
end

--- guess parameters from data.
-- @param deltas
-- @param t1
-- @param r1
-- @param t2
-- @param r2
-- @param t3
-- @param r3
-- @return (tensor 6) guessed parameters
function Rigid:guess(deltas, t1, r1, t2, r2, t3, r3)
    return torch.cat(t1, r1)
end


register_joint 'Prismatic'

--- constructor.
-- @param p (tensor 9 or numeric array(9)) the joint parameters
function Prismatic:new(p)
    return setmetatable({p = torch.Tensor(p)}, {__index = Prismatic})
end

--- unpack joint parameters.
-- @return table of { offset (SE), dir (tensor 3) }
function Prismatic:unpack()
    return {offset = SE:new(3)
                       :T(self.p[{{1,3}}])
                       :R_euler('ZYZ', self.p[{{4,6}}]),
            dir    = self.p[{{7,9}}]}
end

--- forward kinematics.
-- @param state
-- @param jacobian non-nil if the Jacobians should be calculated
-- @return x
-- @return Dr (if jacobian is non-nil)
-- @return Dt (if jacobian is non-nil)
function Prismatic:forward(state, jacobian)
    local p = self:unpack()

    -- prismatic forward kinematics: translation
    local x = SE:new(3):T(state * p.dir) * p.offset.m

    if jacobian then
        local t, r = p.offset:extract()
        if #t == 2 then
            local Dr = torch.Tensor{{0, 0, -math.sin(r[1]), 0, 0, 0},
                                    {0, 0,  math.cos(r[1]), 0, 0, 0},
                                    {0, 0, -math.cos(r[1]), 0, 0, 0},
                                    {0, 0, -math.sin(r[1]), 0, 0, 0}}
            local Dt = torch.Tensor{{1, 0, 0, state, 0,     p.dir[1]},
                                    {0, 1, 0, 0,     state, p.dir[2]}}
        else
            local Dr = torch.Tensor{{0 , 0 , 0 , -math.cos(r[1])*math.sin(r[3]) - math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) , -math.cos(r[1])*math.cos(r[3])*math.sin(r[2]) , -math.cos(r[3])*math.sin(r[1]) - math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) , 0 , 0 , 0 , 0}, 
                                    {0 , 0 , 0 ,  math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) - math.sin(r[1])*math.sin(r[3]) , -math.cos(r[3])*math.sin(r[1])*math.sin(r[2]) ,  math.cos(r[1])*math.cos(r[3]) - math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) , 0 , 0 , 0 , 0}, 
                                    {0 , 0 , 0 ,  0                                                                            ,  math.cos(r[2])*math.cos(r[3])                , -math.sin(r[2])*math.sin(r[3])                                                , 0 , 0 , 0 , 0}, 
                                    {0 , 0 , 0 ,  math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) - math.cos(r[1])*math.cos(r[3]) ,  math.cos(r[1])*math.sin(r[2])*math.sin(r[3]) ,  math.sin(r[1])*math.sin(r[3]) - math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) , 0 , 0 , 0 , 0}, 
                                    {0 , 0 , 0 , -math.cos(r[3])*math.sin(r[1]) - math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) ,  math.sin(r[1])*math.sin(r[2])*math.sin(r[3]) , -math.cos(r[1])*math.sin(r[3]) - math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) , 0 , 0 , 0 , 0}, 
                                    {0 , 0 , 0 ,  0                                                                            , -math.cos(r[2])*math.sin(r[3])                , -math.cos(r[3])*math.sin(r[2])                                                , 0 , 0 , 0 , 0}, 
                                    {0 , 0 , 0 ,  math.sin(r[1])*math.sin(r[2])                                                , -math.cos(r[1])*math.cos(r[2])                ,  0                                                                            , 0 , 0 , 0 , 0}, 
                                    {0 , 0 , 0 , -math.cos(r[1])*math.sin(r[2])                                                , -math.cos(r[2])*math.sin(r[1])                ,  0                                                                            , 0 , 0 , 0 , 0}, 
                                    {0 , 0 , 0 , 0                                                                             , -math.sin(r[2])                               ,  0                                                                            , 0 , 0 , 0 , 0}}
            local Dt = torch.Tensor{{1, 0, 0, 0, 0, 0, state, 0,     0,     p.dir[1]},
                                    {0, 1, 0, 0, 0, 0, 0,     state, 0,     p.dir[2]},
                                    {0, 0, 1, 0, 0, 0, 0,     0,     state, p.dir[3]}}
        end
        return x, Dr, Dt
    else
        return x
    end
end

--- inverse kinematics.
-- @param x
-- @param jacobian (non-nil if Jacobian should be calculated)
-- @return state
-- @return D (if jacobian is non-nil)
function Prismatic:inverse(x, jacobian)
    local p = self:unpack()

    local state = (x * self.p.offset:i())[{ {1,3},4 }]:dot(p.dir)

    if jacobian then
        local t, r = p.offset:extract()
        local d = #t*(#t+1)/2
        local D = torch.cat(torch.eye(d+n), torch.zeros(1 ,d+n))

        if #t == 2 then
            D[{ -1,{} }] = torch.Tensor{-p.dir[1]*(x[{{1,1}}]*math.cos(r) - x[{{1,2}}]*math.sin(r)) - p.dir[2]*(x[{{2,1}}]*math.cos(r) - x[{{2,2}}]*math.sin(r))                                                                                                                                                                                               ,
                                        -x[{{1,2}}]*p.dir[1]*math.cos(r) - x[{{2,2}}]*p.dir[2]*math.cos(r) - x[{{1,1}}]*p.dir[1]*math.sin(r) - x[{{2,1}}]*p.dir[2]*math.sin(r)                                                                                                                                                                                 ,
                                         x[{{1,2}}]*t[1]*p.dir[1]*math.cos(r) - x[{{1,1}}]*t[2]*p.dir[1]*math.cos(r) + x[{{2,2}}]*t[1]*p.dir[2]*math.cos(r) - x[{{2,1}}]*t[2]*p.dir[2]*math.cos(r) + x[{{1,1}}]*t[1]*p.dir[1]*math.sin(r) + x[{{1,2}}]*t[2]*p.dir[1]*math.sin(r) + x[{{2,1}}]*t[1]*p.dir[2]*math.sin(r) + x[{{2,2}}]*t[2]*p.dir[2]*math.sin(r) ,
                                         x[{{1,3}}] - x[{{1,1}}]*t[1]*math.cos(r) - x[{{1,2}}]*t[2]*math.cos(r) + x[{{1,2}}]*t[1]*math.sin(r) - x[{{1,1}}]*t[2]*math.sin(r)                                                                                                                                                                                    ,
                                         x[{{2,3}}] - x[{{2,1}}]*t[1]*math.cos(r) - x[{{2,2}}]*t[2]*math.cos(r) + x[{{2,2}}]*t[1]*math.sin(r) - x[{{2,1}}]*t[2]*math.sin(r)                                                                                                                                                                                    }
        else
            D[{ -1,{} }] = torch.Tensor{x[{{1,1}}]*p.dir[1]*math.sin(r[1])*math.sin(r[3]) + x[{{2,1}}]*p.dir[2]*math.sin(r[1])*math.sin(r[3]) + x[{{3,1}}]*p.dir[3]*math.sin(r[1])*math.sin(r[3]) + x[{{1,2}}]*p.dir[1]*math.cos(r[3])*math.sin(r[1]) + x[{{1,3}}]*p.dir[1]*math.cos(r[1])*math.sin(r[2]) + x[{{2,2}}]*p.dir[2]*math.cos(r[3])*math.sin(r[1]) + x[{{2,3}}]*p.dir[2]*math.cos(r[1])*math.sin(r[2]) + x[{{3,2}}]*p.dir[3]*math.cos(r[3])*math.sin(r[1]) + x[{{3,3}}]*p.dir[3]*math.cos(r[1])*math.sin(r[2]) - x[{{1,1}}]*p.dir[1]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) - x[{{2,1}}]*p.dir[2]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) - x[{{3,1}}]*p.dir[3]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) + x[{{1,2}}]*p.dir[1]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) + x[{{2,2}}]*p.dir[2]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) + x[{{3,2}}]*p.dir[3]*math.cos(r[1])*math.cos(r[2])*math.sin(r
                                        x[{{1,3}}]*p.dir[1]*math.sin(r[1])*math.sin(r[2]) + x[{{2,3}}]*p.dir[2]*math.sin(r[1])*math.sin(r[2]) + x[{{3,3}}]*p.dir[3]*math.sin(r[1])*math.sin(r[2]) - x[{{1,2}}]*p.dir[1]*math.cos(r[1])*math.cos(r[3]) - x[{{2,2}}]*p.dir[2]*math.cos(r[1])*math.cos(r[3]) - x[{{3,2}}]*p.dir[3]*math.cos(r[1])*math.cos(r[3]) - x[{{1,1}}]*p.dir[1]*math.cos(r[1])*math.sin(r[3]) - x[{{2,1}}]*p.dir[2]*math.cos(r[1])*math.sin(r[3]) - x[{{3,1}}]*p.dir[3]*math.cos(r[1])*math.sin(r[3]) - x[{{1,1}}]*p.dir[1]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) - x[{{2,1}}]*p.dir[2]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) - x[{{3,1}}]*p.dir[3]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{1,2}}]*p.dir[1]*math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) + x[{{2,2}}]*p.dir[2]*math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) + x[{{3,2}}]*p.dir[3]*math.cos(r[2])*math.sin(r[1])*math.sin(r
                                        x[{{1,2}}]*p.dir[1]*math.sin(r[2])*math.sin(r[3]) - x[{{2,3}}]*p.dir[2]*math.cos(r[2]) - x[{{3,3}}]*p.dir[3]*math.cos(r[2]) - x[{{1,3}}]*p.dir[1]*math.cos(r[2]) + x[{{2,2}}]*p.dir[2]*math.sin(r[2])*math.sin(r[3]) + x[{{3,2}}]*p.dir[3]*math.sin(r[2])*math.sin(r[3]) - x[{{1,1}}]*p.dir[1]*math.cos(r[3])*math.sin(r[2]) - x[{{2,1}}]*p.dir[2]*math.cos(r[3])*math.sin(r[2]) - x[{{3,1}}]*p.dir[3]*math.cos(r[3])*math.sin(r
                                        x[{{1,2}}]*t[1]*p.dir[1]*math.cos(r[1])*math.cos(r[3]) + x[{{2,2}}]*t[1]*p.dir[2]*math.cos(r[1])*math.cos(r[3]) + x[{{3,2}}]*t[1]*p.dir[3]*math.cos(r[1])*math.cos(r[3]) + x[{{1,1}}]*t[1]*p.dir[1]*math.cos(r[1])*math.sin(r[3]) + x[{{1,2}}]*t[2]*p.dir[1]*math.cos(r[3])*math.sin(r[1]) + x[{{1,3}}]*t[2]*p.dir[1]*math.cos(r[1])*math.sin(r[2]) + x[{{2,1}}]*t[1]*p.dir[2]*math.cos(r[1])*math.sin(r[3]) + x[{{2,2}}]*t[2]*p.dir[2]*math.cos(r[3])*math.sin(r[1]) + x[{{2,3}}]*t[2]*p.dir[2]*math.cos(r[1])*math.sin(r[2]) + x[{{3,1}}]*t[1]*p.dir[3]*math.cos(r[1])*math.sin(r[3]) + x[{{3,2}}]*t[2]*p.dir[3]*math.cos(r[3])*math.sin(r[1]) + x[{{3,3}}]*t[2]*p.dir[3]*math.cos(r[1])*math.sin(r[2]) - x[{{1,3}}]*t[1]*p.dir[1]*math.sin(r[1])*math.sin(r[2]) + x[{{1,1}}]*t[2]*p.dir[1]*math.sin(r[1])*math.sin(r[3]) - x[{{2,3}}]*t[1]*p.dir[2]*math.sin(r[1])*math.sin(r[2]) + x[{{2,1}}]*t[2]*p.dir[2]*math.sin(r[1])*math.sin(r[3]) - x[{{3,3}}]*t[1]*p.dir[3]*math.sin(r[1])*math.sin(r[2]) + x[{{3,1}}]*t[2]*p.dir[3]*math.sin(r[1])*math.sin(r[3]) - x[{{1,1}}]*t[2]*p.dir[1]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) - x[{{2,1}}]*t[2]*p.dir[2]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) - x[{{3,1}}]*t[2]*p.dir[3]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) + x[{{1,1}}]*t[1]*p.dir[1]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{1,2}}]*t[2]*p.dir[1]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) + x[{{2,1}}]*t[1]*p.dir[2]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{2,2}}]*t[2]*p.dir[2]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) + x[{{3,1}}]*t[1]*p.dir[3]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{3,2}}]*t[2]*p.dir[3]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) - x[{{1,2}}]*t[1]*p.dir[1]*math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) - x[{{2,2}}]*t[1]*p.dir[2]*math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) - x[{{3,2}}]*t[1]*p.dir[3]*math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) ,
                                        x[{{1,3}}]*t[3]*p.dir[1]*math.sin(r[2]) + x[{{2,3}}]*t[3]*p.dir[2]*math.sin(r[2]) + x[{{3,3}}]*t[3]*p.dir[3]*math.sin(r[2]) + x[{{1,3}}]*t[1]*p.dir[1]*math.cos(r[1])*math.cos(r[2]) - x[{{1,1}}]*t[3]*p.dir[1]*math.cos(r[2])*math.cos(r[3]) + x[{{2,3}}]*t[1]*p.dir[2]*math.cos(r[1])*math.cos(r[2]) - x[{{2,1}}]*t[3]*p.dir[2]*math.cos(r[2])*math.cos(r[3]) + x[{{3,3}}]*t[1]*p.dir[3]*math.cos(r[1])*math.cos(r[2]) - x[{{3,1}}]*t[3]*p.dir[3]*math.cos(r[2])*math.cos(r[3]) + x[{{1,3}}]*t[2]*p.dir[1]*math.cos(r[2])*math.sin(r[1]) + x[{{1,2}}]*t[3]*p.dir[1]*math.cos(r[2])*math.sin(r[3]) + x[{{2,3}}]*t[2]*p.dir[2]*math.cos(r[2])*math.sin(r[1]) + x[{{2,2}}]*t[3]*p.dir[2]*math.cos(r[2])*math.sin(r[3]) + x[{{3,3}}]*t[2]*p.dir[3]*math.cos(r[2])*math.sin(r[1]) + x[{{3,2}}]*t[3]*p.dir[3]*math.cos(r[2])*math.sin(r[3]) + x[{{1,1}}]*t[1]*p.dir[1]*math.cos(r[1])*math.cos(r[3])*math.sin(r[2]) + x[{{2,1}}]*t[1]*p.dir[2]*math.cos(r[1])*math.cos(r[3])*math.sin(r[2]) + x[{{3,1}}]*t[1]*p.dir[3]*math.cos(r[1])*math.cos(r[3])*math.sin(r[2]) - x[{{1,2}}]*t[1]*p.dir[1]*math.cos(r[1])*math.sin(r[2])*math.sin(r[3]) + x[{{1,1}}]*t[2]*p.dir[1]*math.cos(r[3])*math.sin(r[1])*math.sin(r[2]) - x[{{2,2}}]*t[1]*p.dir[2]*math.cos(r[1])*math.sin(r[2])*math.sin(r[3]) + x[{{2,1}}]*t[2]*p.dir[2]*math.cos(r[3])*math.sin(r[1])*math.sin(r[2]) - x[{{3,2}}]*t[1]*p.dir[3]*math.cos(r[1])*math.sin(r[2])*math.sin(r[3]) + x[{{3,1}}]*t[2]*p.dir[3]*math.cos(r[3])*math.sin(r[1])*math.sin(r[2]) - x[{{1,2}}]*t[2]*p.dir[1]*math.sin(r[1])*math.sin(r[2])*math.sin(r[3]) - x[{{2,2}}]*t[2]*p.dir[2]*math.sin(r[1])*math.sin(r[2])*math.sin(r[3]) - x[{{3,2}}]*t[2]*p.dir[3]*math.sin(r[1])*math.sin(r[2])*math.sin(r[3])                                                                                                                                                                                                                         ,
                                        x[{{1,1}}]*t[1]*p.dir[1]*math.cos(r[3])*math.sin(r[1]) - x[{{2,1}}]*t[2]*p.dir[2]*math.cos(r[1])*math.cos(r[3]) - x[{{3,1}}]*t[2]*p.dir[3]*math.cos(r[1])*math.cos(r[3]) - x[{{1,1}}]*t[2]*p.dir[1]*math.cos(r[1])*math.cos(r[3]) + x[{{1,2}}]*t[2]*p.dir[1]*math.cos(r[1])*math.sin(r[3]) + x[{{2,1}}]*t[1]*p.dir[2]*math.cos(r[3])*math.sin(r[1]) + x[{{1,2}}]*t[3]*p.dir[1]*math.cos(r[3])*math.sin(r[2]) + x[{{2,2}}]*t[2]*p.dir[2]*math.cos(r[1])*math.sin(r[3]) + x[{{3,1}}]*t[1]*p.dir[3]*math.cos(r[3])*math.sin(r[1]) + x[{{2,2}}]*t[3]*p.dir[2]*math.cos(r[3])*math.sin(r[2]) + x[{{3,2}}]*t[2]*p.dir[3]*math.cos(r[1])*math.sin(r[3]) + x[{{3,2}}]*t[3]*p.dir[3]*math.cos(r[3])*math.sin(r[2]) - x[{{1,2}}]*t[1]*p.dir[1]*math.sin(r[1])*math.sin(r[3]) + x[{{1,1}}]*t[3]*p.dir[1]*math.sin(r[2])*math.sin(r[3]) - x[{{2,2}}]*t[1]*p.dir[2]*math.sin(r[1])*math.sin(r[3]) + x[{{2,1}}]*t[3]*p.dir[2]*math.sin(r[2])*math.sin(r[3]) - x[{{3,2}}]*t[1]*p.dir[3]*math.sin(r[1])*math.sin(r[3]) + x[{{3,1}}]*t[3]*p.dir[3]*math.sin(r[2])*math.sin(r[3]) + x[{{1,2}}]*t[1]*p.dir[1]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) + x[{{2,2}}]*t[1]*p.dir[2]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) + x[{{3,2}}]*t[1]*p.dir[3]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) + x[{{1,1}}]*t[1]*p.dir[1]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) + x[{{1,2}}]*t[2]*p.dir[1]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{2,1}}]*t[1]*p.dir[2]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) + x[{{2,2}}]*t[2]*p.dir[2]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{3,1}}]*t[1]*p.dir[3]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) + x[{{3,2}}]*t[2]*p.dir[3]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{1,1}}]*t[2]*p.dir[1]*math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) + x[{{2,1}}]*t[2]*p.dir[2]*math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) + x[{{3,1}}]*t[2]*p.dir[3]*math.cos(r[2])*math.sin(r[1])*math.sin(r[3]) ,
                                        x[{{1,4}}] - x[{{1,3}}]*t[3]*math.cos(r[2]) + x[{{1,1}}]*t[1]*math.sin(r[1])*math.sin(r[3]) + x[{{1,3}}]*t[2]*math.sin(r[1])*math.sin(r[2]) + x[{{1,2}}]*t[3]*math.sin(r[2])*math.sin(r[3]) - x[{{1,2}}]*t[2]*math.cos(r[1])*math.cos(r[3]) + x[{{1,2}}]*t[1]*math.cos(r[3])*math.sin(r[1]) + x[{{1,3}}]*t[1]*math.cos(r[1])*math.sin(r[2]) - x[{{1,1}}]*t[2]*math.cos(r[1])*math.sin(r[3]) - x[{{1,1}}]*t[3]*math.cos(r[3])*math.sin(r[2]) - x[{{1,1}}]*t[1]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) + x[{{1,2}}]*t[1]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) - x[{{1,1}}]*t[2]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{1,2}}]*t[2]*math.cos(r[2])*math.sin(r[1])*math.sin(r
                                        x[{{2,4}}] - x[{{2,3}}]*t[3]*math.cos(r[2]) + x[{{2,1}}]*t[1]*math.sin(r[1])*math.sin(r[3]) + x[{{2,3}}]*t[2]*math.sin(r[1])*math.sin(r[2]) + x[{{2,2}}]*t[3]*math.sin(r[2])*math.sin(r[3]) - x[{{2,2}}]*t[2]*math.cos(r[1])*math.cos(r[3]) + x[{{2,2}}]*t[1]*math.cos(r[3])*math.sin(r[1]) + x[{{2,3}}]*t[1]*math.cos(r[1])*math.sin(r[2]) - x[{{2,1}}]*t[2]*math.cos(r[1])*math.sin(r[3]) - x[{{2,1}}]*t[3]*math.cos(r[3])*math.sin(r[2]) - x[{{2,1}}]*t[1]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) + x[{{2,2}}]*t[1]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) - x[{{2,1}}]*t[2]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{2,2}}]*t[2]*math.cos(r[2])*math.sin(r[1])*math.sin(r
                                        x[{{3,4}}] - x[{{3,3}}]*t[3]*math.cos(r[2]) + x[{{3,1}}]*t[1]*math.sin(r[1])*math.sin(r[3]) + x[{{3,3}}]*t[2]*math.sin(r[1])*math.sin(r[2]) + x[{{3,2}}]*t[3]*math.sin(r[2])*math.sin(r[3]) - x[{{3,2}}]*t[2]*math.cos(r[1])*math.cos(r[3]) + x[{{3,2}}]*t[1]*math.cos(r[3])*math.sin(r[1]) + x[{{3,3}}]*t[1]*math.cos(r[1])*math.sin(r[2]) - x[{{3,1}}]*t[2]*math.cos(r[1])*math.sin(r[3]) - x[{{3,1}}]*t[3]*math.cos(r[3])*math.sin(r[2]) - x[{{3,1}}]*t[1]*math.cos(r[1])*math.cos(r[2])*math.cos(r[3]) + x[{{3,2}}]*t[1]*math.cos(r[1])*math.cos(r[2])*math.sin(r[3]) - x[{{3,1}}]*t[2]*math.cos(r[2])*math.cos(r[3])*math.sin(r[1]) + x[{{3,2}}]*t[2]*math.cos(r[2])*math.sin(r[1])*math.sin(r}
        end
        return state, D
    else
        return state
    end
end

--- guess parameters from data.
-- @param deltas
-- @param t1
-- @param r1
-- @param t2
-- @param r2
-- @param t3
-- @param r3
-- @return (tensor 9) guessed parameters
function Prismatic:guess(deltas, t1, r1, t2, r2, t3, r3)
    return FL.reduce(torch.cat, t1, {r1, (t3 - t1)/(t3 - t1):norm()})
end


register_joint 'Revolute'

--- constructor.
-- @param p (tensor 12 or numeric array(12)) the joint parameters
function Revolute:new(p)
    return setmetatable({p = torch.Tensor(p)}, {__index = Revolute})
end

--- unpack joint parameters.
-- @return table of { center (SE), radius (SE) }
function Revolute:unpack()
    return {center = SE:new(3)
                       :T(self.p[{{1,3}}])
                       :R_euler('ZYZ', self.p[{{4,6}}]),
            radius = SE:new(3)
                       :T(self.p[{{7,9}}])
                       :R_euler('ZYZ', self.p[{{10,12}}])}
end

--- forward kinematics.
-- @param state
-- @param jacobian non-nil if the Jacobians should be calculated
-- @return x
-- @return Dr (if jacobian is non-nil)
-- @return Dt (if jacobian is non-nil)
function Revolute:forward(state, jacobian)
    local p = self:unpack()

    -- prismatic revolute kinematics: rotation
    local x = p.radius.m * SE:new(3):R_euler('Z', state).m * p.center.m

    if jacobian then
        local ct, cr = p.center:extract()
        local rt, rr = p.radius:extract()
        if #ct == 2 then
            local thr = rr + theta
            local th = cr + thr
            local cthr = torch.cos(thr) local sthr = torch.sin(thr)
            local cth = torch.cos(th)   local sth = torch.sin(th)
            local Dr = torch.Tensor{{0, 0, -sth,     0, 0, -sth,    -sth},
                                    {0, 0,  cth,     0, 0,  cth,     cth},
                                    {0, 0, -cth,     0, 0, -cth,    -cth},
                                    {0, 0, -sth,     0, 0, -sth,    -sth}}
            local Dt = torch.Tensor{{cthr, -sthr, 0,     1, 0, -sthr*ct[1]-cthr*ct[2],      -sthr*ct[1]-cthr*ct[2]},
                                    {sthr,  cthr, 0,     0, 1,  cthr*ct[1]-sthr*ct[2],       cthr*ct[1]-sthr*ct[2]}}
        else
            local ccr = torch.cos(cr)       local scr = torch.sin(cr)
            local crr = torch.cos(rr)       local srr = torch.sin(rr)
            local ctheta = torch.cos(theta) local stheta = sin(theta)
            local Dr = torch.Tensor{{0                                                                                               , 0                                                                                             , 0              , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) + (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))   , ccr[1]*ccr[3]*scr[2]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) + ccr[3]*scr[1]*scr[2]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - ccr[2]*ccr[3]*crr[1]*srr[2]   , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) - (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) + crr[1]*scr[2]*scr[3]*srr[2] , 0 , 0 , 0 , (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) + ccr[3]*scr[2]*srr[1]*srr[2] , (crr[1]*crr[3]*srr[2]*stheta + crr[1]*ctheta*srr[2]*srr[3])*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + (crr[1]*crr[3]*ctheta*srr[2] - crr[1]*srr[2]*srr[3]*stheta)*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]) - ccr[3]*crr[1]*crr[2]*scr[2] , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) + (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))   , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) + (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))   },
                                    {0                                                                                               , 0                                                                                             , 0              , - (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) , - ccr[1]*ccr[3]*scr[2]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - ccr[3]*scr[1]*scr[2]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - ccr[2]*ccr[3]*srr[1]*srr[2] , (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) + scr[2]*scr[3]*srr[1]*srr[2] , 0 , 0 , 0 , (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) - (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - ccr[3]*crr[1]*scr[2]*srr[2] , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1]*srr[2]*stheta + ctheta*srr[1]*srr[2]*srr[3]) + (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[3]*ctheta*srr[1]*srr[2] - srr[1]*srr[2]*srr[3]*stheta) - ccr[3]*crr[2]*scr[2]*srr[1] , - (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) , - (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) },
                                    {0                                                                                               , 0                                                                                             , 0              , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2]) + (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3])                                                                                                       , ccr[2]*ccr[3]*crr[2] + ccr[1]*ccr[3]*scr[2]*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2]) + ccr[3]*scr[1]*scr[2]*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3])                                                                                                              , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2]) - (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3]) - crr[2]*scr[2]*scr[3]                                                                                                            , 0 , 0 , 0 , 0                                                                                                                                                                                                                                                                                                             , (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[2]*srr[3]*stheta - crr[2]*crr[3]*ctheta) - (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[2]*crr[3]*stheta + crr[2]*ctheta*srr[3]) - ccr[3]*scr[2]*srr[2]                                    , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2]) + (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3])                                                                                                       , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2]) + (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3])                                                                                                       },
                                    {0                                                                                               , 0                                                                                             , 0              , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) + (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))   , ccr[2]*crr[1]*scr[3]*srr[2] - scr[1]*scr[2]*scr[3]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - ccr[1]*scr[2]*scr[3]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))   , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) + ccr[3]*crr[1]*scr[2]*srr[2] , 0 , 0 , 0 , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - scr[2]*scr[3]*srr[1]*srr[2] , (crr[1]*crr[3]*srr[2]*stheta + crr[1]*ctheta*srr[2]*srr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + (crr[1]*crr[3]*ctheta*srr[2] - crr[1]*srr[2]*srr[3]*stheta)*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + crr[1]*crr[2]*scr[2]*scr[3] , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) + (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))   , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) + (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))   },
                                    {0                                                                                               , 0                                                                                             , 0              , - (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) , ccr[1]*scr[2]*scr[3]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) + scr[1]*scr[2]*scr[3]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) + ccr[2]*scr[3]*srr[1]*srr[2]   , (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) + ccr[3]*scr[2]*srr[1]*srr[2] , 0 , 0 , 0 , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) - (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) + crr[1]*scr[2]*scr[3]*srr[2] , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[3]*ctheta*srr[1]*srr[2] - srr[1]*srr[2]*srr[3]*stheta) + (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1]*srr[2]*stheta + ctheta*srr[1]*srr[2]*srr[3]) + crr[2]*scr[2]*scr[3]*srr[1] , - (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) , - (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) },
                                    {0                                                                                               , 0                                                                                             , 0              , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3]) + (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2])                                                                                                       , - ccr[2]*crr[2]*scr[3] - ccr[1]*scr[2]*scr[3]*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2]) - scr[1]*scr[2]*scr[3]*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3])                                                                                                            , (ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3]) - (scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2]) - ccr[3]*crr[2]*scr[2]                                                                                                            , 0 , 0 , 0 , 0                                                                                                                                                                                                                                                                                                             , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[2]*srr[3]*stheta - crr[2]*crr[3]*ctheta) - (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[2]*crr[3]*stheta + crr[2]*ctheta*srr[3]) + scr[2]*scr[3]*srr[2]                                    , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3]) + (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2])                                                                                                       , (ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srr[3]) + (ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2])                                                                                                       },
                                    {0                                                                                               , 0                                                                                             , 0              , ccr[1]*scr[2]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - scr[1]*scr[2]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))                                                     , ccr[1]*ccr[2]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) + ccr[2]*scr[1]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) + crr[1]*scr[2]*srr[2]                        , 0                                                                                                                                                                                                                                                                                                             , 0 , 0 , 0 , ccr[1]*scr[2]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) + scr[1]*scr[2]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) + ccr[2]*srr[1]*srr[2]                                                          , ccr[1]*scr[2]*(crr[1]*crr[3]*ctheta*srr[2] - crr[1]*srr[2]*srr[3]*stheta) - scr[1]*scr[2]*(crr[1]*crr[3]*srr[2]*stheta + crr[1]*ctheta*srr[2]*srr[3]) - ccr[2]*crr[1]*crr[2]                                                          , ccr[1]*scr[2]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - scr[1]*scr[2]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))                                                     , ccr[1]*scr[2]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - scr[1]*scr[2]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))                                                     },
                                    {0                                                                                               , 0                                                                                             , 0              , scr[1]*scr[2]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - ccr[1]*scr[2]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]))                                                     , scr[2]*srr[1]*srr[2] - ccr[1]*ccr[2]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - ccr[2]*scr[1]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]))                        , 0                                                                                                                                                                                                                                                                                                             , 0 , 0 , 0 , ccr[1]*scr[2]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) + scr[1]*scr[2]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - ccr[2]*crr[1]*srr[2]                                                          , ccr[1]*scr[2]*(crr[3]*ctheta*srr[1]*srr[2] - srr[1]*srr[2]*srr[3]*stheta) - scr[1]*scr[2]*(crr[3]*srr[1]*srr[2]*stheta + ctheta*srr[1]*srr[2]*srr[3]) - ccr[2]*crr[2]*srr[1]                                                          , scr[1]*scr[2]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - ccr[1]*scr[2]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]))                                                     , scr[1]*scr[2]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])) - ccr[1]*scr[2]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]))                                                     },
                                    {0                                                                                               , 0                                                                                             , 0              , -(math.sin(cr[1] + rr[3] + theta)*(math.cos(cr[2] + rr[2]) - math.cos(cr[2] - rr[2])))/2                                                                                                                                                                                          , ccr[1]*ccr[2]*(srr[2]*srr[3]*stheta - crr[3]*ctheta*srr[2]) - crr[2]*scr[2] + ccr[2]*scr[1]*(crr[3]*srr[2]*stheta + ctheta*srr[2]*srrccr[1]*scr[2]*(crr[2]*srr[3]*stheta - crr[2]*crr[3]*ctheta) - ccr[2]*srr[2] + scr[1]*scr[2]*(crr[2]*crr[3]*stheta + crr[2]*ctheta*srr[3])                                                                                             , -(math.sin(cr[1] + rr[3] + theta)*(math.cos(cr[2] + rr[2]) - math.cos(cr[2] - rr[2])))/2                                                                                                                                                                                          , -(math.sin(cr[1] + rr[3] + theta)*(math.cos(cr[2] + rr[2]) - math.cos(cr[2] - rr[2])))/2                                                                                                                                                                                          }}
            local Dt = torch.Tensor{{-ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) - stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])  , stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) - ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) , -crr[1]*srrct[3]*srr[1]*srr[2] - ct[2]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - ct[1]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]))                                                                           , crr[1]*(ct[2]*crr[3]*srr[2]*stheta - ct[1]*crr[3]*ctheta*srr[2] - ct[3]*crr[2] + ct[2]*ctheta*srr[2]*srr[3] + ct[1]*srr[2]*srr[3]*stheta)                                                                                             , ct[2]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) - ct[1]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))                                                                     , ct[2]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) - ct[1]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))                                                                     },
                                    { ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])  , ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) , -srr[1]*srrct[1]*(ctheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + stheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])) - ct[2]*(ctheta*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - stheta*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])) - ct[3]*crr[1]*srr[2]                                                                         , srr[1]*(ct[2]*crr[3]*srr[2]*stheta - ct[1]*crr[3]*ctheta*srr[2] - ct[3]*crr[2] + ct[2]*ctheta*srr[2]*srr[3] + ct[1]*srr[2]*srr[3]*stheta)                                                                                             , ct[1]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - ct[2]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]))                                                                     , ct[1]*(ctheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - stheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])) - ct[2]*(ctheta*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + stheta*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]))                                                                     },
                                    { math.cos(rr[3] + theta)*srr[2]                                                                 , -math.sin(rr[3] + theta)*srr[2]                                                               , crr[2]         , 0                                                                                                                                                                                                                                                                                 , 0                                                                                                                                                                                                                                                                           , 0                                                                                                                                                                                                                                                                                                             , 0 , 0 , 1 , 0                                                                                                                                                                                                                                                                                                                                            , - ct(1)*(crr(2)*srr(3)*stheta - crr(2)*crr(3)*ctheta) - ct(2)*(crr(2)*crr(3)*stheta + crr(2)*ctheta*srr(3)) - ct(3)*srr(2)                   , -srr(2)*(ct(2)*cos(rr(3) + theta) + ct(1)*sin(rr(3) + theta))                                                                                                                                                                                                                                            , -srr(2)*(ct(2)*cos(rr(3) + theta) + ct(1)*sin(rr(3) + theta))                                                                                                                                                                                                                                                        }}
        end
        return x, Dr, Dt
    else
        return x
    end
end

--- inverse kinematics.
-- @param x
-- @param jacobian (non-nil if Jacobian should be calculated)
-- @return state
-- @return D (if jacobian is non-nil)
function Revolute:inverse(x, jacobian)
    local p = self:unpack()

    local rot = p.radius:i() * x * p.center:i()
    local state = math.acos(0.5 * (rot:trace() - 2))
    local e = torch.Tensor{(rot[{{3,2}}]-rot[{{2,3}}])/(2*math.sin(state)), (rot[{{1,3}}]-rot[{{3,1}}])/(2*math.sin(state)), (rot[{{2,1}}]-rot[{{1,2}}])/(2*math.sin(state))}
    local y,i = torch.max(e:abs())
    state = state * e[i]

    if jacobian then
        local ct, cr = p.center:extract()
        local rt, rr = p.radius:extract()
        local d = #ct*(#ct+1)/2
        local D = torch.cat(torch.eye(d*2), torch.zeros(1, d*2))

        if #t == 2 then
            D[{ -1,{} }] = torch.Tensor{0, 0, -1,      0, 0, -1}
        else
            local ccr = torch.cos(cr) local scr = torch.sin(cr)
            local crr = torch.cos(rr) local srr = torch.sin(rr);
            D[{ -1,{} }] = torch.Tensor{0,
                                        0,
                                        0,
                                        (x[{{1,1}}]*ccr[2]*crr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,2}}]*ccr[2]*crr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*ccr[2]*crr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,2}}]*ccr[2]*crr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]) - x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]) - x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[1]*ccr[3]*crr[2]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[1]*ccr[3]*crr[2]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*ccr[1]*crr[2]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*ccr[1]*crr[2]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + x[{{2,2}}]*ccr[1]*ccr[3]*crr[1]*scr[2]^2*srr[2]^2*srr[3] + x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]) - x[{{1,2}}]*ccr[1]*ccr[3]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*ccr[1]*crr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]) - x[{{1,1}}]*ccr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] - x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[1]*ccr[3]*crr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])
                                                - x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,1}}]*ccr[1]*crr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[1]*ccr[3]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*ccr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))/((1 - (x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])
                                                - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))^2/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))^2*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))^2))^(1/2)*(ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))),
                                        ((x[{{1,1}}]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,2}}]*crr[2]*scr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,2}}]*crr[2]*scr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,2}}]*scr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,3}}]*ccr[2]*ccr[3]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[2]*ccr[3]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,1}}]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{2,2}}]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[2]*crr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[2]*crr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{1,1}}]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{1,2}}]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{3,1}}]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{3,2}}]*crr[1]*scr[2]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,2}}]*ccr[2]*ccr[3]*crr[2]*scr[1]*scr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[2]*ccr[3]*crr[2]*scr[1]*scr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*ccr[2]*crr[2]*scr[1]*scr[2]*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*ccr[2]*crr[2]*scr[1]*scr[2]*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[2]*ccr[3]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[2]*ccr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*ccr[2]*crr[1]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,3}}]*ccr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{3,3}}]*ccr[2]*ccr[3]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*ccr[2]*ccr[3]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*ccr[2]*crr[1]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*ccr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*ccr[3]*crr[1]*scr[1]*scr[2]*srr[2]^2*srr[3]
                                                - x[{{1,2}}]*ccr[2]*ccr[3]*scr[1]*scr[2]*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*ccr[2]*crr[1]*scr[1]*scr[2]*scr[3]*srr[2]^2*srr[3] - x[{{1,1}}]*ccr[2]*scr[1]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,2}}]*ccr[2]*ccr[3]*crr[1]*scr[1]*scr[2]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,1}}]*ccr[2]*crr[1]*scr[1]*scr[2]*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*ccr[3]*scr[1]*scr[2]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*ccr[2]*scr[1]*scr[2]*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))) - ((scr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - scr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + ccr[1]*ccr[2]*ccr[3]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[2]*ccr[3]*scr[1]*scr[2]*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + ccr[2]*scr[1]*scr[2]*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))*(x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3]
                                                - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])))/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))^2*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])
                                                - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))))/(1 - (x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3]
                                                - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))^2/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))^2*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))^2))^(1/2),
                                        (x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,1}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{1,2}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,2}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,1}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,1}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] - x[{{2,2}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{1,2}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,1}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,1}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,2}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{3,2}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))/((1 - (x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3]
                                                - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))^2/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])
                                                + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))^2*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))^2))^(1/2)*(ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))),
                                        0,
                                        0,
                                        0,
                                        -(x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{1,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{2,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{1,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{1,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] + x[{{2,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{2,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3])/((1 - (x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3]
                                                - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))^2/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])
                                                + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))^2*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))^2))^(1/2)*(ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))),
                                        ((x[{{1,1}}]*ccr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,2}}]*ccr[2]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*ccr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,2}}]*ccr[2]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[2]*srr[1]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[2]*srr[1]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,3}}]*ccr[3]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{1,3}}]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,3}}]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*crr[2]*srr[2]*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*crr[2]*srr[2]*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*crr[2]*srr[1]*srr[2]*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*crr[2]*srr[1]*srr[2]*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{3,3}}]*ccr[3]*crr[1]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*ccr[3]*crr[2]*scr[2]*srr[1]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*crr[2]*scr[2]*scr[3]*srr[1]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*srr[1]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*srr[1]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*crr[2]*scr[2]*srr[2]*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])
                                                - x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*srr[1]*srr[2]*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*crr[2]*scr[2]*scr[3]*srr[2]*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*crr[2]*scr[1]*scr[2]^2*srr[2]*srr[3] - x[{{1,3}}]*crr[2]*scr[2]*scr[3]*srr[1]*srr[2]*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*srr[1]*srr[2]*srr[3] + x[{{2,1}}]*crr[1]*crr[2]*scr[1]*scr[2]^2*scr[3]*srr[2]*srr[3] - x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*srr[3])/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))) - ((srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) - srr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + crr[1]*crr[2]*crr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*crr[2]*srr[2]*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[2]*crr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + crr[2]*srr[1]*srr[2]*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))*(x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3]
                                                - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3])))/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3]
                                                - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))^2))/(1 - (x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3] + x[{{2,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])
                                                - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))^2/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))^2*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))^2))^(1/2),
                                        -(x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + x[{{2,1}}]*ccr[2]*crr[1]*crr[3]*srr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{2,2}}]*ccr[2]*crr[1]*crr[3]*srr[2]^2*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,1}}]*ccr[2]*crr[3]*srr[1]*srr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{1,2}}]*ccr[2]*crr[3]*srr[1]*srr[2]^2*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) - x[{{2,3}}]*ccr[3]*crr[1]*crr[3]*scr[2]*srr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{1,3}}]*ccr[3]*crr[3]*scr[2]*srr[1]*srr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{2,3}}]*crr[1]*crr[3]*scr[2]*scr[3]*srr[2]^2*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{2,2}}]*ccr[3]*crr[1]*crr[3]*scr[1]*scr[2]^2*srr[2]^2 + x[{{1,3}}]*crr[3]*scr[2]*scr[3]*srr[1]*srr[2]^2*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,2}}]*ccr[3]*crr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2 - x[{{2,1}}]*crr[1]*crr[3]*scr[1]*scr[2]^2*scr[3]*srr[2]^2 + x[{{1,1}}]*crr[3]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2 + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])
                                                + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))/((1 - (x[{{1,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,2}}]*ccr[2]*crr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{2,1}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,2}}]*ccr[2]*crr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,1}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,2}}]*ccr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{1,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[2]*scr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[2]*crr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{1,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,3}}]*crr[2]*scr[2]*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,2}}]*ccr[3]*crr[2]*scr[1]*scr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - x[{{3,1}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,2}}]*ccr[2]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{1,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{2,1}}]*crr[2]*scr[1]*scr[2]^2*scr[3]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{2,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) - x[{{1,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + x[{{2,3}}]*crr[1]*scr[2]*scr[3]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + x[{{2,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]^2*srr[3] - x[{{1,3}}]*scr[2]*scr[3]*srr[1]*srr[2]^2*srr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) - x[{{1,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]^2*srr[3]
                                                + x[{{2,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*crr[1]*scr[2]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) - x[{{1,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]^2*srr[3] + x[{{3,3}}]*ccr[3]*scr[2]*srr[1]*srr[2]*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,3}}]*crr[1]*scr[2]*scr[3]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*crr[1]*scr[1]*scr[2]^2*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,3}}]*scr[2]*scr[3]*srr[1]*srr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*crr[1]*scr[1]*scr[2]^2*scr[3]*srr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + x[{{3,2}}]*ccr[3]*scr[1]*scr[2]^2*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + x[{{3,1}}]*scr[1]*scr[2]^2*scr[3]*srr[1]*srr[2]*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]))^2/((ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))^2*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]))^2))^(1/2)*(ccr[2]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1])*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) - ccr[2]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3])*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*ccr[3]*scr[2]^2*(ccr[1]*ccr[3] - ccr[2]*scr[1]*scr[3]) + ccr[1]*scr[2]^2*scr[3]*(ccr[1]*scr[3] + ccr[2]*ccr[3]*scr[1]) + ccr[3]*scr[1]*scr[2]^2*(ccr[3]*scr[1] + ccr[1]*ccr[2]*scr[3]) + scr[1]*scr[2]^2*scr[3]*(scr[1]*scr[3] - ccr[1]*ccr[2]*ccr[3]))*(crr[2]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1])*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) - crr[2]*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3])*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3]) + crr[1]*crr[3]*srr[2]^2*(crr[1]*crr[3] - crr[2]*srr[1]*srr[3]) + crr[1]*srr[2]^2*srr[3]*(crr[1]*srr[3] + crr[2]*crr[3]*srr[1]) + crr[3]*srr[1]*srr[2]^2*(crr[3]*srr[1] + crr[1]*crr[2]*srr[3]) + srr[1]*srr[2]^2*srr[3]*(srr[1]*srr[3] - crr[1]*crr[2]*crr[3])))}
        end
        return state, D
    else
        return state
    end
end

--- guess parameters from data.
-- @param deltas
-- @param t1
-- @param r1
-- @param t2
-- @param r2
-- @param t3
-- @param r3
-- @return (tensor 12) guessed parameters
function Revolute:guess(deltas, t1, r1, t2, r2, t3, r3)
    -- center
    --   for the translation, use the circumcenter of the three points
    local plane = Plane:fit(deltas[{ {},{1,3},4 }])
    local in_plane = FL.map(plane.project, {t1, t2, t3})
    local ct = plane.unproject(geometry.circumcenter(unpack(in_plane)))
    --   build up the rotation from axes
    --     TODO does this work
    local cr = torch.zeros(3,3)
    cr[1] = plane.x
    cr[2] = plane.y
    cr[3] = torch.cross(cr[1], cr[2])
    _, cr = SE:new(3):R(cr):extract()

    -- radius
    --   just get the radius by looking at the transform between center -> {t1,r1}
    --     TODO does this work
    local center = SE:new(3):T(ct):R(cr).m
    local rt, rr = SE:new( SE:new(3):T(t1):R(r1).m * center:i() ):extract()

    return FL.reduce(torch.cat, ct, {cr, rt, rr})
end

return joints

